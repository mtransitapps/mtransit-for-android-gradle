# ORIGINAL FILE: https://github.com/mtransitapps/commons/tree/master/shared-overwrite
version: 2.1
orbs:
  # https://circleci.com/developer/orbs/orb/circleci/android
  android: circleci/android@1.0.2
jobs:
  build:
    working_directory: ~/mtransit
    docker:
      - image: circleci/android:api-30
        auth:
          username: montransit
          password: $MT_DOCKER_PASSWORD
    # resource_class: medium # small, medium (default), medium+, large, xlarge
    environment:
      JAVA_TOOL_OPTIONS: -Xmx3200m
      JVM_OPTS: -Xmx3200m
      JAVA_OPTS: -Xmx3200m
      GRADLE_OPTS: -Xmx3200m
      # GRADLE_OPTS: -Xms1024m -Xmx3200m -XX:MaxPermSize=3200m -XX:MaxMetaspaceSize=1024m -XX:+CMSClassUnloadingEnabled -XX:+CMSPermGenSweepingEnabled -XX:+HeapDumpOnOutOfMemoryError
      # GRADLE_OPTS: -Xms1g -Xmx4g -XX:MaxPermSize=2g -XX:MaxMetaspaceSize=1g -XX:+CMSClassUnloadingEnabled -XX:+HeapDumpOnOutOfMemoryError
      # GRADLE_OPTS: -Xms512M -Xmx4g -XX:MaxPermSize=1024m -XX:MaxMetaspaceSize=1g -Dkotlin.daemon.jvm.options="-Xmx1g"
      TERM: xterm-256color
      TZ: "America/Toronto"
    steps:
      - run:
          name: Install GAWK - GNU awk
          command: |
            sudo apt-get update
            sudo apt-get -y install gawk
      - android/accept-licenses
      - run:
          name: Update SDK
          command: echo y | sdkmanager "build-tools;30.0.3" "platform-tools" "platforms;android-30"
      - checkout
      - run:
          name: checkout_submodules.sh permissions
          command: sudo chmod +x checkout_submodules.sh
      - run:
          name: Checkout submodules
          command: ./checkout_submodules.sh
      - run:
          name: commons/sync.sh permissions
          command: sudo chmod +x commons/sync.sh
      - run:
          name: Sync files
          command: ./commons/sync.sh
      - android/restore-build-cache:
          cache-prefix: build-cache
      - android/restore-gradle-cache:
          cache-prefix: gradle-cache
          find-args: . -type f \( -name "*.gradle" -o -name "gradle-wrapper.properties" \)
      # - restore_cache:
      #     key: gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      #   - run:
      #     name: Generate gradle cache key
      #     command: ./init_cache_key.sh
      #   - restore_cache:
      #     keys:
      #       - gradle-cache-{{ checksum "gradle_cache_key_checksum.txt" }}
      #       - gradle-cache- # fallback to using the latest cache if no exact match is found
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies --no-daemon --no-parallel --no-configure-on-demand --max-workers=2 --console=plain
      - run:
          name: Build
          command: ./build.sh
      # - save_cache:
      #     paths:
      #       - ~/.gradle/caches/
      #     key: gradle-cache-{{ checksum "gradle_cache_key_checksum.txt" }}
      # - save_cache:
      #     paths:
      #       - ~/.gradle/wrapper/
      #     key: gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - android/save-build-cache:
          cache-prefix: build-cache
      - android/save-gradle-cache:
          cache-prefix: gradle-cache
      - store_artifacts:
          path: app-android/build/reports
          destination: reports
      - store_artifacts:
          path: app-android/build/outputs/apk
          destination: apks
      - store_artifacts:
          path: app-android/build/outputs/bundle
          destination: bundles
      - store_artifacts:
          path: commons-android/build/reports
          destination: commons-android-reports
      - run:
          name: Save test results for all Gradle modules
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always # even when previous steps fail
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit 
